name: Production test coverage and Docker Build

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  coverage:
    name: Check coverage
    runs-on: ubuntu-latest
    outputs:
      build-docker: ${{ steps.set-output.outputs.build-docker }}
    env:
      NODE_ENV: 'test'
      SUPABASE_URL: ${{ vars.SUPABASE_URL }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: npm-cache-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        working-directory: server
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Run tests
        working-directory: server
        run: npm test -- --coverage --coverageReporters=json-summary
      - name: Check coverage threshold
        working-directory: server
        id: set-output
        run: |
          COVERAGE=$(node -pe "require('./coverage/coverage-summary.json').total.statements.pct")
          echo "Total coverage: $COVERAGE%" 
          if (( $(echo "$COVERAGE < 60" | bc -l) )); then
            echo "❌ Coverage is below 60%. Found: $COVERAGE%"
            echo "build-docker=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ Coverage check passed with $COVERAGE%"
             echo "build-docker=true" >> $GITHUB_OUTPUT
          fi
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: coverage
    if: needs.coverage.outputs.build-docker == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set Image name
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Build and push MVC Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./server
          push: true
          tags: |
            ${{ vars.DOCKER_USERNAME}}/rangeiq-api:${{ steps.vars.outputs.sha_short }}
            ${{ vars.DOCKER_USERNAME }}/rangeiq-mvc:latest
          build-args: |
            DB_HOST=${{ vars.DB_HOST }}
            DB_NAME=${{ vars.DB_NAME }}
            DB_PORT=${{ vars.DB_PORT }}
            DB_USER=${{ vars.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
      - name: Build and push Database Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./database
          push: true
          tags: |
            ${{ vars.DOCKER_USERNAME }}/rangeiq-db:${{ steps.vars.outputs.sha_short }}
            ${{ vars.DOCKER_USERNAME }}/rangeiq-db:latest
          build-args: |
            POSTGRES_DB=${{ vars.POSTGRES_DB }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
